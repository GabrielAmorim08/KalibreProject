@page "/"
@using Projeto_Kalibre.VO
@rendermode InteractiveServer
@inject IJSRuntime IJS
<style>
	/* Reset */
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	html, body {
		height: 100%;
		font-family: 'Arial', sans-serif;
		background-color: mediumseagreen;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.my-super-card {
		width: 400px;
		padding: 20px;
		background-color: #ffffff;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
		border-radius: 10px;
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	h6 {
		font-size: 16px;
		margin-bottom: 10px;
		text-align: center;
	}

	.form-group {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding-bottom: 15px;
	}

	label {
		font-size: 14px;
		margin-bottom: 5px;
	}

	input {
		/* width: 100%; */
		padding: 8px;
		font-size: 14px;
		border: 1px solid #ccc;
		border-radius: 5px;
		text-align: center;
	}

		input:focus {
			outline: none;
			border-color: #3498db;
		}

	button {
		padding: 10px;
		border: none;
		border-radius: 5px;
		font-size: 14px;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

		/* Botão de calcular */
		button[type="submit"] {
			background-color: #3498db;
			color: #fff;
		}

			button[type="submit"]:hover {
				background-color: #2980b9;
			}

	/* Botão de imprimir */
	.print-btn {
		background-color: #2ecc71;
		color: #fff;
	}

		.print-btn:hover {
			background-color: #27ae60;
		}

	/* Resultados */
	.results h5 {
		font-size: 14px;
		margin: 5px 0;
		text-align: center;
	}

	/* Responsividade */
	@@media (max-width: 480px) {
		.my-super-card {
			width: 95%;
		}
	}
</style>

<div class="my-super-card">
	<div>
		<div class="form-group">
			<h6 for="peso">Peso da bisnaga cheia</h6>
			<input id="peso" type="number" @bind="calc.Peso" required />
		</div>

		<div class="form-group">
			<h6 for="densidade">Densidade</h6>
			<input id="densidade" type="number" @bind="calc.Densidade" required />
		</div>

		<h6>Amostras dos frascos vazios</h6>
		<div class="form-group">
			<input type="number" @bind="calc.PesoAmostra1" required placeholder="Amostra 1" />
		</div>
		<div class="form-group">
			<input type="number" @bind="calc.PesoAmostra2" required placeholder="Amostra 2" />
		</div>
		<div class="form-group">
			<input type="number" @bind="calc.PesoAmostra3" required placeholder="Amostra 3" />
		</div>
		<div class="form-group">
			<input type="number" @bind="calc.PesoAmostra4" required placeholder="Amostra 4" />
		</div>
		<div class="form-group">
			<input type="number" @bind="calc.PesoAmostra5" required placeholder="Amostra 5" />
		</div>
							
		<button type="submit" hidden="true" onclick="@Calcular()" class="btn btn-primary" disabled="@isCalculating">
			@(isCalculating ? "Calculando..." : "Calcular")
		</button>
		<button class="print-btn" @onclick="Imprimir">Imprimir</button>

		<div class="results">
			<h5>Média das amostras: @Math.Round(calc.mediaAmostra,2)</h5>
			<h5>Peso mínimo: @Math.Round(calc.ResultadoMin,2)</h5>
			<h5>Peso médio: @Math.Round(calc.ResultadoMed,2)</h5>
			<h5>Peso máximo: @Math.Round(calc.ResultadoMax,2)</h5>
		</div>
	</div>
</div>


@code {
	private Model calc = new Model();
	private bool isCalculating;

	class Model
	{
		public double Peso { get; set; }
		public double PesoBisnagas { get; set; }
		public double PesoAmostra1 { get; set; }
		public double PesoAmostra2 { get; set; }
		public double PesoAmostra3 { get; set; }
		public double PesoAmostra4 { get; set; }
		public double PesoAmostra5 { get; set; }
		public double Densidade { get; set; }
		public double ResultadoMin { get; set; }
		public double mediaAmostra { get; set; }
		public double ResultadoMed { get; set; }
		public double ResultadoMax { get; set; }
	}

	private async Task Calcular()
	{
		calc.mediaAmostra = CalcularMediaAmostras();
		calc.ResultadoMin = CalcularPesoMinimo();

		calc.ResultadoMed = CalcularPesoMedio();

		calc.ResultadoMax = CalcularPesoMaximo();
	}
	public async Task Imprimir()
	{
		try
		{
			await IJS.InvokeVoidAsync("printPage");
		}
		catch (Exception e)
		{

		}
	}

	private double CalcularPesoMinimo() => calc.Peso * calc.Densidade + calc.mediaAmostra;

	private double CalcularMediaAmostras() => (calc.PesoAmostra1 + calc.PesoAmostra2 + calc.PesoAmostra3 + calc.PesoAmostra4 + calc.PesoAmostra5) / 5;

	private double CalcularPesoMedio() => calc.Peso * calc.Densidade + calc.mediaAmostra + 0.1;

	private double CalcularPesoMaximo() => calc.Peso * calc.Densidade + calc.mediaAmostra + 0.3;
}
